import random
import math

# Generate synthetic data
def generate_data():
    return [[random.uniform(0, 10), random.uniform(0, 10)] for _ in range(100)]

# Calculate Euclidean distance
def euclidean_distance(p1, p2):
    return math.sqrt(sum((p1[i] - p2[i]) ** 2 for i in range(len(p1))))

# Assign points to the nearest cluster
def assign_clusters(data, centroids):
    clusters = [[] for _ in centroids]
    for point in data:
        distances = [euclidean_distance(point, centroid) for centroid in centroids]
        cluster_index = distances.index(min(distances))
        clusters[cluster_index].append(point)
    return clusters

# Compute new centroids
def compute_centroids(clusters):
    centroids = []
    for cluster in clusters:
        centroid = [sum(coord) / len(cluster) for coord in zip(*cluster)] if cluster else [0, 0]
        centroids.append(centroid)
    return centroids

# K-Means algorithm
def k_means(data, k=3, max_iters=100):
    centroids = random.sample(data, k)
    
    for _ in range(max_iters):
        clusters = assign_clusters(data, centroids)
        new_centroids = compute_centroids(clusters)
        
        if new_centroids == centroids:  # Stop if centroids don't change
            break
        centroids = new_centroids
    
    return clusters, centroids

# Run K-Means
data = generate_data()
clusters, centroids = k_means(data, k=3)

# Print results
for i, cluster in enumerate(clusters):
    print(f"Cluster {i+1} ({len(cluster)} points): {cluster}")
print(f"Final Centroids: {centroids}")
